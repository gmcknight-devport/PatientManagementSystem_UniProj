/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.awt.event.ActionListener;
import java.awt.event.WindowListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;

/**
 *
 * @author Glenn McKnight
 */
public class SecretaryGUI extends javax.swing.JFrame {

    /**
     * Creates new form SecretaryGUI
     */
    public SecretaryGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        titleJLabel = new javax.swing.JLabel();
        logoutJButton = new javax.swing.JButton();
        backgroundJTabbedPane = new javax.swing.JTabbedPane();
        homeJPanel = new javax.swing.JPanel();
        welcomeJLabel = new javax.swing.JLabel();
        userInfoJText = new javax.swing.JTextArea();
        detailsJLabel = new javax.swing.JLabel();
        messagesJLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        messagesJList = new javax.swing.JList<>();
        deleteMessageJButton = new javax.swing.JButton();
        accountJPanel = new javax.swing.JPanel();
        requesedAccountJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        creationJList = new javax.swing.JList<>();
        approveCreationJButton = new javax.swing.JButton();
        declineCreationJButton = new javax.swing.JButton();
        removePatientJLabel = new javax.swing.JLabel();
        removePatientJCombo = new javax.swing.JComboBox<>();
        removeAccountJButton = new javax.swing.JButton();
        appointmentJPanel = new javax.swing.JPanel();
        appointmentRequestJLabel = new javax.swing.JLabel();
        setAppointmentJLabel = new javax.swing.JLabel();
        appointmentDateJSpinner = new javax.swing.JSpinner();
        appointmentDateJLabel = new javax.swing.JLabel();
        appointmentTimeJLabel = new javax.swing.JLabel();
        appointmentDOctorJLabel = new javax.swing.JLabel();
        appointmentPatientJLabel = new javax.swing.JLabel();
        appointmentTimeJCombo = new javax.swing.JComboBox<>();
        appointmentDoctorJCombo = new javax.swing.JComboBox<>();
        appointmentPatientJCombo = new javax.swing.JComboBox<>();
        createAppointmentJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        appointmentRequestJList = new javax.swing.JList<>();
        approveAppointmentJButton = new javax.swing.JButton();
        declineAppointmentJButton = new javax.swing.JButton();
        deleteAppointmentJLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        deleteAppointmentsJList = new javax.swing.JList<>();
        deleteAppointmentJButton = new javax.swing.JButton();
        medicinesJPanel = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        medicinesJList = new javax.swing.JList<>();
        medicinesJLabel = new javax.swing.JLabel();
        medicinePatientJCombo = new javax.swing.JComboBox<>();
        medicinePatientIDJLabel = new javax.swing.JLabel();
        medicineQuantityJLabel = new javax.swing.JLabel();
        medicineQuantityJSpinner = new javax.swing.JSpinner();
        orderJButton = new javax.swing.JButton();
        giveMedicineJButton = new javax.swing.JButton();
        deleteMedicineJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        titleJLabel.setText("Indisposed Clinic");

        logoutJButton.setText("Log Out");

        welcomeJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        welcomeJLabel.setText("Welcome Back!");

        userInfoJText.setEditable(false);
        userInfoJText.setColumns(20);
        userInfoJText.setRows(5);
        userInfoJText.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        detailsJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        detailsJLabel.setText("Your details:");

        messagesJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        messagesJLabel.setText("Messages");

        jScrollPane4.setViewportView(messagesJList);

        deleteMessageJButton.setText("Delete Message");

        javax.swing.GroupLayout homeJPanelLayout = new javax.swing.GroupLayout(homeJPanel);
        homeJPanel.setLayout(homeJPanelLayout);
        homeJPanelLayout.setHorizontalGroup(
            homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeJPanelLayout.createSequentialGroup()
                .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homeJPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(welcomeJLabel))
                    .addGroup(homeJPanelLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteMessageJButton)
                            .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(userInfoJText, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                                .addComponent(detailsJLabel)
                                .addComponent(messagesJLabel)
                                .addComponent(jScrollPane4)))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        homeJPanelLayout.setVerticalGroup(
            homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeJLabel)
                .addGap(52, 52, 52)
                .addComponent(detailsJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userInfoJText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(messagesJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteMessageJButton)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        backgroundJTabbedPane.addTab("Home", homeJPanel);

        requesedAccountJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        requesedAccountJLabel.setText("Account Creation Requests");

        jScrollPane1.setViewportView(creationJList);

        approveCreationJButton.setText("Approve");

        declineCreationJButton.setText("Decline");

        removePatientJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        removePatientJLabel.setText("Remove Patients");

        removeAccountJButton.setText("Remove");

        javax.swing.GroupLayout accountJPanelLayout = new javax.swing.GroupLayout(accountJPanel);
        accountJPanel.setLayout(accountJPanelLayout);
        accountJPanelLayout.setHorizontalGroup(
            accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountJPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountJPanelLayout.createSequentialGroup()
                        .addComponent(removePatientJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removeAccountJButton))
                    .addComponent(removePatientJLabel)
                    .addComponent(requesedAccountJLabel)
                    .addGroup(accountJPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(approveCreationJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(declineCreationJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        accountJPanelLayout.setVerticalGroup(
            accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(requesedAccountJLabel)
                .addGap(12, 12, 12)
                .addGroup(accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountJPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(approveCreationJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(declineCreationJButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(removePatientJLabel)
                .addGap(18, 18, 18)
                .addGroup(accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removePatientJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeAccountJButton))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        backgroundJTabbedPane.addTab("Accounts", accountJPanel);

        appointmentRequestJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        appointmentRequestJLabel.setText("Appointment requests");

        setAppointmentJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        setAppointmentJLabel.setText("Appointment Setting");

        appointmentDateJSpinner.setModel(new javax.swing.SpinnerDateModel());

        appointmentDateJLabel.setText("Appointment date:");

        appointmentTimeJLabel.setText("Appointment time:");

        appointmentDOctorJLabel.setText("Doctor:");

        appointmentPatientJLabel.setText("Patient:");

        createAppointmentJButton.setText("Create Appointment");

        jScrollPane3.setViewportView(appointmentRequestJList);

        approveAppointmentJButton.setText("Approve Appointment");

        declineAppointmentJButton.setText("Decline Appointment");

        deleteAppointmentJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        deleteAppointmentJLabel.setText("Delete Appointments");

        jScrollPane2.setViewportView(deleteAppointmentsJList);

        deleteAppointmentJButton.setText("Delete Appointment");

        javax.swing.GroupLayout appointmentJPanelLayout = new javax.swing.GroupLayout(appointmentJPanel);
        appointmentJPanel.setLayout(appointmentJPanelLayout);
        appointmentJPanelLayout.setHorizontalGroup(
            appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appointmentJPanelLayout.createSequentialGroup()
                        .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(appointmentDateJLabel)
                            .addComponent(appointmentTimeJLabel))
                        .addGap(52, 52, 52)
                        .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(appointmentTimeJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appointmentDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                        .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(createAppointmentJButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(appointmentJPanelLayout.createSequentialGroup()
                                .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(appointmentPatientJLabel)
                                    .addComponent(appointmentDOctorJLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(appointmentPatientJCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(appointmentDoctorJCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(setAppointmentJLabel)
                    .addComponent(appointmentRequestJLabel)
                    .addGroup(appointmentJPanelLayout.createSequentialGroup()
                        .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                            .addComponent(deleteAppointmentJLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteAppointmentJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(approveAppointmentJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(declineAppointmentJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        appointmentJPanelLayout.setVerticalGroup(
            appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentJPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(appointmentRequestJLabel)
                .addGap(3, 3, 3)
                .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(appointmentJPanelLayout.createSequentialGroup()
                        .addComponent(approveAppointmentJButton)
                        .addGap(18, 18, 18)
                        .addComponent(declineAppointmentJButton)
                        .addGap(8, 8, 8))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteAppointmentJLabel)
                .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appointmentJPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteAppointmentJButton)
                        .addGap(38, 38, 38))
                    .addGroup(appointmentJPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)))
                .addComponent(setAppointmentJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appointmentDateJLabel)
                    .addComponent(appointmentDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appointmentDoctorJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appointmentDOctorJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(appointmentPatientJCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(appointmentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(appointmentTimeJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(appointmentTimeJLabel)
                        .addComponent(appointmentPatientJLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createAppointmentJButton)
                .addContainerGap())
        );

        backgroundJTabbedPane.addTab("Appointments", appointmentJPanel);

        jScrollPane.setViewportView(medicinesJList);

        medicinesJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        medicinesJLabel.setText("Medicines");

        medicinePatientIDJLabel.setText("Patient ID");

        medicineQuantityJLabel.setText("Medicine Quantity");

        medicineQuantityJSpinner.setModel(new javax.swing.SpinnerNumberModel());

        orderJButton.setText("Order Medicine");

        giveMedicineJButton.setText("Give Medicine");
        giveMedicineJButton.setActionCommand("");

        deleteMedicineJButton.setText("Delete Medicine");
        deleteMedicineJButton.setActionCommand("");

        javax.swing.GroupLayout medicinesJPanelLayout = new javax.swing.GroupLayout(medicinesJPanel);
        medicinesJPanel.setLayout(medicinesJPanelLayout);
        medicinesJPanelLayout.setHorizontalGroup(
            medicinesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(medicinesJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(medicinesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane)
                    .addGroup(medicinesJPanelLayout.createSequentialGroup()
                        .addComponent(medicinesJLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(medicinesJPanelLayout.createSequentialGroup()
                        .addGroup(medicinesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(orderJButton)
                            .addGroup(medicinesJPanelLayout.createSequentialGroup()
                                .addComponent(medicineQuantityJLabel)
                                .addGap(130, 130, 130)
                                .addComponent(medicineQuantityJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(medicinesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(medicinesJPanelLayout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(medicinePatientIDJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                                .addComponent(medicinePatientJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(medicinesJPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(giveMedicineJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, medicinesJPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deleteMedicineJButton)))
                .addContainerGap())
        );
        medicinesJPanelLayout.setVerticalGroup(
            medicinesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(medicinesJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(medicinesJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(medicinesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medicineQuantityJLabel)
                    .addComponent(medicineQuantityJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medicinePatientIDJLabel)
                    .addComponent(medicinePatientJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(medicinesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(giveMedicineJButton)
                    .addComponent(orderJButton))
                .addGap(35, 35, 35)
                .addComponent(deleteMedicineJButton)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        backgroundJTabbedPane.addTab("Medicines", medicinesJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleJLabel)
                .addGap(153, 153, 153)
                .addComponent(logoutJButton)
                .addContainerGap())
            .addComponent(backgroundJTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(logoutJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backgroundJTabbedPane))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecretaryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecretaryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecretaryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecretaryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SecretaryGUI().setVisible(true);
            }
        });
    }
    /**
     * Displays a JOptionPane to provide information to the user when required. 
     * @param message to be displayed.
     */
    public void displayMessage(String message){
        JOptionPane.showMessageDialog(this, message);
    }
    /**
     * Set the messages the user has received to the messageJList.
     * @param messages of user to be displayed.
     */
    public void setUserMessages(List<String> messages){
        String[] allMessages = new String[messages.size()]; 
        
        for(int i = 0; i < messages.size(); i++){
            allMessages[i] = messages.get(i);
        }
        
        messagesJList.setListData(allMessages);
    }
    /**
     * Register button handler for delete message button.
     * @param controller to respond to event.
     */
    public void addDeleteMessageButtonHandler(ActionListener controller){
        deleteMessageJButton.addActionListener(controller);
    }
    /**
     * Get the index of the selected message to be deleted.
     * @return 
     */
    public int getMessageToDeleteIndex(){
        return messagesJList.getSelectedIndex();
    } 
    /**
     * Register button handler to respond to logout button.
     * @param controller to respond to event.
     */
    public void addLogoutButtonHandler(ActionListener controller){
        logoutJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to approve account button.
     * @param controller to respond to event.
     */
    public void addApproveAccountButtonHandler(ActionListener controller){
        approveCreationJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to decline account button.
     * @param controller to respond to event.
     */
    public void addDeclineAccountButtonHandler(ActionListener controller){
        declineCreationJButton.addActionListener(controller);
    }
        /**
     * Register button handler to respond to remove account button.
     * @param controller to respond to event.
     */
    public void addRemoveAccountButtonHandler(ActionListener controller){
        removeAccountJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to approve appointment button.
     * @param controller to respond to event.
     */
    public void addApproveAppointmentButtonHandler(ActionListener controller){
        approveAppointmentJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to create appointment button.
     * @param controller to respond to event.
     */
    public void addCreateAppointmentButtonHandler(ActionListener controller){
        createAppointmentJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to order medicine button.
     * @param controller to respond to event.
     */
    public void addOrderMedicineButtonHandler(ActionListener controller){
        orderJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to delete medicine button.
     * @param controller to respond to event.
     */
    public void addDeleteMedicineButtonHandler(ActionListener controller){
        deleteMedicineJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to prescribe medicine button.
     * @param controller to respond to event.
     */
    public void addPrescribeMedicineButtonHandler(ActionListener controller){
        giveMedicineJButton.addActionListener(controller);
    }
    /**
     * Display patient's to be removed form the system.
     * @param patients list of patients
     */
    public void setRemoveJCombo(ArrayList<String> patients){
        removePatientJCombo.removeAllItems();
        
        for(String s : patients){
            removePatientJCombo.addItem(s);
        } 
    }
    /**
     * Get selected patient to be deleted.
     * @return patient.
     */
    public String getDeletePatientValue(){
        return removePatientJCombo.getSelectedItem().toString();
    }
    /**
     * Display list of account creation requests.
     * @param requests to be set.
     */
    public void setCreationJList(String[] requests){
        if(requests != null){
            creationJList.setListData(requests);
        }
    }
    /**
     * Sets text box with logged in user information.
     * @param info about logged in user.
     */
    public void setSecInfoText(String info){
        userInfoJText.setText(info);
    }
    /**
     * Gets index of account selected for creation.
     * @return account index.
     */
    public int getCreationSelectedIndex(){
        return creationJList.getSelectedIndex();
    }
    /**
     * Gets value of the user account to be created.
     * @return patient account to be created.
     */
    public String getCreationSelectedValue(){
        return creationJList.getSelectedValue();
    }
    /**
     * Display data of accounts that have been requested by patient and require 
     * approval.
     * @param appointments to be approved.
     */
    public void setAppointmentApprovalRequests(String[] appointments){
        appointmentRequestJList.setListData(appointments);
    }
    /**
     * Register button handler for decline appointment button.
     * @param controller to respond to event.
     */
    public void addDeclineAppointmentButtonHandler(ActionListener controller){
        declineAppointmentJButton.addActionListener(controller);
    }
    /**
     * Sets format of date spinner to local date to avoid confusion between 
     * different potential date formats.
     */
    public void setAppointmentDateSpinnerFormat(){
        
        try{
            SimpleDateFormat format;
            format = ((JSpinner.DateEditor) appointmentDateJSpinner.getEditor()).getFormat();
            format.applyPattern("dd/MM/yy");
            appointmentDateJSpinner.commitEdit();
            
        } catch(ParseException ex){
            displayMessage("Appointment booking date format error");
            System.out.println(ex);
        }
    }
    /**
     * Fills JComboBox with possible appointment times.
     * @param times to be set.
     */
    public void setAppointmentTimeCombo(List<String> times){
        times.forEach((s) -> {
            appointmentTimeJCombo.addItem(s);
        });
    }
    /**
     * Fills doctor JCombo with doctorIDs of those available for appointments.
     * @param doctorIDs 
     */
    public void setDoctorCombo(List<String> doctorIDs){
        doctorIDs.forEach((s) -> {
            appointmentDoctorJCombo.addItem(s);
        });
    }
    /**
     * Set the data in the patient JCombos. 
     * @param patientIDs list of patIDs to be displayed.
     */  
    public void setPatientCombos(List<String> patientIDs){
        patientIDs.forEach((s) -> {
            appointmentPatientJCombo.addItem(s);
            medicinePatientJCombo.addItem(s);
        });
    }
    /**
     * Display list of appointments to be deleted. Those that have been declined.
     * @param appointments to be set.
     */
    public void setDeleteAppointmentsList(String[] appointments){
        deleteAppointmentsJList.setListData(appointments);
    }
    /**
     * Register button handler for delete appointment button.
     * @param controller to respond to event.
     */
    public void addDeleteAppointmentButtonHandler(ActionListener controller){
        deleteAppointmentJButton.addActionListener(controller);
    }
    /**
     * Get the index of the appointment selected for deletion.
     * @return index of appointment.
     */
    public int getDeleteAppointmentIndex(){
        return deleteAppointmentsJList.getSelectedIndex();
    }
    /**
     * Get index of the appointment requested.
     * @return index of appointment.
     */
    public int getAppointmentRequestIndex(){
        return appointmentRequestJList.getSelectedIndex();
    }
    /**
     * Return selected appointment date from JSpinner.
     * @return date selected.
     */
    public LocalDate getAppointmentDate(){
        try{            
            Date date = (Date)appointmentDateJSpinner.getValue();
            LocalDate returnDate = date.toInstant()
                                    .atZone(ZoneId.systemDefault())
                                    .toLocalDate();
            
            returnDate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            return returnDate;
            
        } catch(ClassCastException ex){
            displayMessage("Couldn't get appointment date");            
            return null;
        }
    }
    /**
     * Get selected time for appointment.
     * @return appointment time requested.
     */
    public String getAppointmentTime(){
        return appointmentTimeJCombo.getSelectedItem().toString();
    }
    /**
     * Return the doctor which the appointment is to be booked for.
     * @return selected doctor.
     */
    public String getAppointmentDoctor(){
        return appointmentDoctorJCombo.getSelectedItem().toString();
    }
    /**
     * Return the patient which the appointment is to be booked for.
     * @return selected patient.
     */
    public String getAppointmentPatient(){
        return appointmentPatientJCombo.getSelectedItem().toString();
    }
    /**
     * Get index of medicine selected.
     * @return medicine index.
     */
    public int getMedicineListIndex(){
        return medicinesJList.getSelectedIndex();
    }
    /**
     * Get the medicine that has been prescribed.
     * @return medicines prescribed/
     */
    public String getPrescribedMedicine(){
        return medicinesJList.getSelectedValue();
    }
    /**
     * Fills JList with available medicines.
     * @param medicines to be set.
     */
    public void setMedicinesJList(String[] medicines){
        medicinesJList.setListData(medicines);
    }
    /**
     * Get the quantity of the selected medicine to be set.
     * @return medicine quantity.
     */
    public int getMedicineQuantity(){
        try{
            return (int) medicineQuantityJSpinner.getValue();
        }catch(ClassCastException ex){
            displayMessage("Coudln't find medicine quantity");
            return 0;
        }
    }
    /**
     * Get the patientID to give prescribed medicine to.
     * @return 
     */
    public String getPrescriptionPatientID(){
        return medicinePatientJCombo.getSelectedItem().toString();
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel accountJPanel;
    private javax.swing.JLabel appointmentDOctorJLabel;
    private javax.swing.JLabel appointmentDateJLabel;
    private javax.swing.JSpinner appointmentDateJSpinner;
    private javax.swing.JComboBox<String> appointmentDoctorJCombo;
    private javax.swing.JPanel appointmentJPanel;
    private javax.swing.JComboBox<String> appointmentPatientJCombo;
    private javax.swing.JLabel appointmentPatientJLabel;
    private javax.swing.JLabel appointmentRequestJLabel;
    private javax.swing.JList<String> appointmentRequestJList;
    private javax.swing.JComboBox<String> appointmentTimeJCombo;
    private javax.swing.JLabel appointmentTimeJLabel;
    private javax.swing.JButton approveAppointmentJButton;
    private javax.swing.JButton approveCreationJButton;
    private javax.swing.JTabbedPane backgroundJTabbedPane;
    private javax.swing.JButton createAppointmentJButton;
    private javax.swing.JList<String> creationJList;
    private javax.swing.JButton declineAppointmentJButton;
    private javax.swing.JButton declineCreationJButton;
    private javax.swing.JButton deleteAppointmentJButton;
    private javax.swing.JLabel deleteAppointmentJLabel;
    private javax.swing.JList<String> deleteAppointmentsJList;
    private javax.swing.JButton deleteMedicineJButton;
    private javax.swing.JButton deleteMessageJButton;
    private javax.swing.JLabel detailsJLabel;
    private javax.swing.JButton giveMedicineJButton;
    private javax.swing.JPanel homeJPanel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton logoutJButton;
    private javax.swing.JLabel medicinePatientIDJLabel;
    private javax.swing.JComboBox<String> medicinePatientJCombo;
    private javax.swing.JLabel medicineQuantityJLabel;
    private javax.swing.JSpinner medicineQuantityJSpinner;
    private javax.swing.JLabel medicinesJLabel;
    private javax.swing.JList<String> medicinesJList;
    private javax.swing.JPanel medicinesJPanel;
    private javax.swing.JLabel messagesJLabel;
    private javax.swing.JList<String> messagesJList;
    private javax.swing.JButton orderJButton;
    private javax.swing.JButton removeAccountJButton;
    private javax.swing.JComboBox<String> removePatientJCombo;
    private javax.swing.JLabel removePatientJLabel;
    private javax.swing.JLabel requesedAccountJLabel;
    private javax.swing.JLabel setAppointmentJLabel;
    private javax.swing.JLabel titleJLabel;
    private javax.swing.JTextArea userInfoJText;
    private javax.swing.JLabel welcomeJLabel;
    // End of variables declaration//GEN-END:variables
}
